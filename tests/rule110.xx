STD_HANDLE_STDIN  :: -10;
STD_HANDLE_STDOUT :: -11;
STD_HANDLE_STDERR :: -12;

#library "kernel32.dll";
GetStdHandle :: #extern (handle: s64) -> s64;
WriteFile    :: #extern (handle: s64, data: string, dataLen: u64, bytesRead: u64*, overlapped: s64);
ExitProcess  :: #extern (code: s64);

BUFFER_SIZE     :: 200;
ITERATION_COUNT :: 20;

main :: () -> u8 {
    stdout := GetStdHandle(STD_HANDLE_STDOUT);
    star := "*";
    space := " ";
    newline := "
";

    buffer: u8[200]; it := 0;
    loop it < BUFFER_SIZE {
        buffer[it] = 0;
        it = it + 1;
    }

    buffer[198] = 1;
    buffer[199] = 1;

    // Pattern:
    // 111 110 101 100 011 010 001 000
    //  0   1   1   0   1   1   1   0
    pattern: u8[8];
    pattern[0] = 0;
    pattern[1] = 1;
    pattern[2] = 1;
    pattern[3] = 1;
    pattern[4] = 0;
    pattern[5] = 1;
    pattern[6] = 1;
    pattern[7] = 0;

    it2 := 0;
    loop it2 < ITERATION_COUNT {
        // Initialize the next iteration buffer
        nextGen: u8[200]; it = 0;
        loop it < BUFFER_SIZE {
            nextGen[it] = 0;
            it = it + 1;
        }

        // Print the current state of the buffer
        it = 0;
        loop it < BUFFER_SIZE {
            cell := buffer[it];

            if cell == 1 WriteFile(stdout, star, 1, 0, 0);
            else if cell == 0 WriteFile(stdout, space, 1, 0, 0);

            it = it + 1;
        }
        WriteFile(stdout, newline, 2, 0, 0);

        // Calculate the next iteration
        it = 0;
        loop it < BUFFER_SIZE - 2 {
            a := buffer[it + 0];
            b := buffer[it + 1];
            c := buffer[it + 2];
            // index := (a << 2) | (b << 1) | c;
            index := 0;
            if a == 1 index = index + 4;
            if b == 1 index = index + 2;
            if c == 1 index = index + 1;
            nextGen[it + 1] = pattern[index];

            it = it + 1;
        }

        // Copy over the data to the buffer
        it = 0;
        loop it < BUFFER_SIZE {
            buffer[it] = nextGen[it];
            it = it + 1;
        }

        it2 = it2 + 1;
    }

    return 0;
}
