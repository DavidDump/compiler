stdout:4447:
./tests/example.xx:5:1	 { IDENTIFIER   main     }
./tests/example.xx:5:6	 { DOUBLECOLON  ::       }
./tests/example.xx:5:9	 { LPAREN       (        }
./tests/example.xx:5:10	 { IDENTIFIER   argc     }
./tests/example.xx:5:14	 { COLON        :        }
./tests/example.xx:5:16	 { TYPE         u64      }
./tests/example.xx:5:19	 { COMMA        ,        }
./tests/example.xx:5:21	 { IDENTIFIER   argv     }
./tests/example.xx:5:25	 { COLON        :        }
./tests/example.xx:5:27	 { TYPE         string   }
./tests/example.xx:5:33	 { LBRACKET     [        }
./tests/example.xx:5:34	 { RBRACKET     ]        }
./tests/example.xx:5:35	 { RPAREN       )        }
./tests/example.xx:5:37	 { RARROW       ->       }
./tests/example.xx:5:40	 { TYPE         u8       }
./tests/example.xx:5:43	 { LSCOPE       {        }
./tests/example.xx:7:5	 { IDENTIFIER   foo      }
./tests/example.xx:7:9	 { INITIALIZER  :=       }
./tests/example.xx:7:12	 { INT_LITERAL  1        }
./tests/example.xx:7:13	 { SEMICOLON    ;        }
./tests/example.xx:9:5	 { IDENTIFIER   bar      }
./tests/example.xx:9:9	 { COLON        :        }
./tests/example.xx:9:11	 { TYPE         s64      }
./tests/example.xx:9:14	 { SEMICOLON    ;        }
./tests/example.xx:11:5	 { IDENTIFIER   bar      }
./tests/example.xx:11:9	 { ASSIGNMENT   =        }
./tests/example.xx:11:11	 { INT_LITERAL  2        }
./tests/example.xx:11:12	 { SEMICOLON    ;        }
./tests/example.xx:13:5	 { IDENTIFIER   baz      }
./tests/example.xx:13:9	 { DOUBLECOLON  ::       }
./tests/example.xx:13:12	 { INT_LITERAL  3        }
./tests/example.xx:13:13	 { SEMICOLON    ;        }
./tests/example.xx:16:5	 { IDENTIFIER   if       }
./tests/example.xx:16:8	 { IDENTIFIER   foo      }
./tests/example.xx:16:12	 { COMPARISON   ==       }
./tests/example.xx:16:15	 { INT_LITERAL  1        }
./tests/example.xx:16:17	 { LSCOPE       {        }
./tests/example.xx:17:9	 { IDENTIFIER   bar      }
./tests/example.xx:17:13	 { ASSIGNMENT   =        }
./tests/example.xx:17:15	 { IDENTIFIER   add      }
./tests/example.xx:17:18	 { LPAREN       (        }
./tests/example.xx:17:19	 { INT_LITERAL  2        }
./tests/example.xx:17:20	 { COMMA        ,        }
./tests/example.xx:17:22	 { IDENTIFIER   bar      }
./tests/example.xx:17:25	 { RPAREN       )        }
./tests/example.xx:17:26	 { SEMICOLON    ;        }
./tests/example.xx:18:5	 { RSCOPE       }        }
./tests/example.xx:18:6	 { IDENTIFIER   else     }
./tests/example.xx:18:10	 { LSCOPE       {        }
./tests/example.xx:19:9	 { IDENTIFIER   bar      }
./tests/example.xx:19:13	 { ASSIGNMENT   =        }
./tests/example.xx:19:15	 { IDENTIFIER   add      }
./tests/example.xx:19:18	 { LPAREN       (        }
./tests/example.xx:19:19	 { INT_LITERAL  3        }
./tests/example.xx:19:20	 { COMMA        ,        }
./tests/example.xx:19:22	 { INT_LITERAL  3        }
./tests/example.xx:19:23	 { RPAREN       )        }
./tests/example.xx:19:24	 { SEMICOLON    ;        }
./tests/example.xx:20:5	 { RSCOPE       }        }
./tests/example.xx:22:5	 { RETURN       return   }
./tests/example.xx:22:12	 { INT_LITERAL  0        }
./tests/example.xx:22:13	 { SEMICOLON    ;        }
./tests/example.xx:23:1	 { RSCOPE       }        }
./tests/example.xx:26:1	 { IDENTIFIER   add      }
./tests/example.xx:26:5	 { DOUBLECOLON  ::       }
./tests/example.xx:26:8	 { LPAREN       (        }
./tests/example.xx:26:9	 { IDENTIFIER   a        }
./tests/example.xx:26:10	 { COLON        :        }
./tests/example.xx:26:12	 { TYPE         s64      }
./tests/example.xx:26:15	 { COMMA        ,        }
./tests/example.xx:26:17	 { IDENTIFIER   b        }
./tests/example.xx:26:18	 { COLON        :        }
./tests/example.xx:26:20	 { TYPE         s64      }
./tests/example.xx:26:23	 { RPAREN       )        }
./tests/example.xx:26:25	 { RARROW       ->       }
./tests/example.xx:26:28	 { TYPE         s64      }
./tests/example.xx:26:32	 { LSCOPE       {        }
./tests/example.xx:27:5	 { RETURN       return   }
./tests/example.xx:27:12	 { IDENTIFIER   a        }
./tests/example.xx:27:14	 { OPERATOR     +        }
./tests/example.xx:27:16	 { IDENTIFIER   b        }
./tests/example.xx:27:17	 { SEMICOLON    ;        }
./tests/example.xx:28:1	 { RSCOPE       }        }
[ERROR] ./tests/example.xx:5:33 Function declaration needs to end with a closing parenthesis ')'
